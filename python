import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.svm import SVR
from sklearn.linear_model import LinearRegression, ElasticNet
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error, r2_score, accuracy_score
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
def load_data(file_path):
    try:
        data = pd.read_csv(file_path, delimiter=",", encoding="utf-8", engine='python', on_bad_lines='skip')
        return data
    except Exception as e:
        print(f"Error loading file: {e}")
        return None
file_path = "/content/KAG_energydata_complete.csv"
data = load_data(file_path)
if data is None:
    exit()
data = data.select_dtypes(include=[np.number])
X = data.drop(columns=['Appliances'])
y = data['Appliances']
scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)
y_scaled = scaler.fit_transform(y.values.reshape(-1, 1))t
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_scaled, test_size=0.2, random_state=42)
rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train, y_train.ravel())
y_pred_rf = rf.predict(X_test)
svm = SVR(kernel='rbf')
svm.fit(X_train, y_train.ravel())
y_pred_svm = svm.predict(X_test)
lr = LinearRegression()
lr.fit(X_train, y_train.ravel())
y_pred_lr = lr.predict(X_test)
en = ElasticNet(alpha=0.1, l1_ratio=0.5, random_state=42)
en.fit(X_train, y_train.ravel())
y_pred_en = en.predict(X_test)
y_pred_hybrid = (y_pred_rf + y_pred_svm + y_pred_lr + y_pred_en) / 4
knn = KNeighborsRegressor(n_neighbors=5)
knn.fit(X_train, y_train.ravel())
y_pred_knn = knn.predict(X_test)
accuracy_hybrid = accuracy_score(np.round(y_test), np.round(y_pred_hybrid))
accuracy_knn = accuracy_score(np.round(y_test), np.round(y_pred_knn))
mse_values = [mean_squared_error(y_test, y_pred_hybrid),
              mean_squared_error(y_test, y_pred_knn)]
r2_values = [r2_score(y_test, y_pred_hybrid),
             r2_score(y_test, y_pred_knn)]
accuracy_values = [accuracy_hybrid, accuracy_knn]
models = ["Hybrid Model", "KNN Model"]
df_results = pd.DataFrame({"Model": models, "MSE": mse_values, "R² Score": r2_values, "Accuracy": accuracy_values})
plt.figure(figsize=(10, 5))
sns.barplot(x="Model", y="MSE", data=df_results, palette='viridis')
plt.title("MSE Comparison: Hybrid vs KNN")
plt.ylabel("Mean Squared Error (MSE)")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()
plt.figure(figsize=(10, 5))
sns.barplot(x="Model", y="R² Score", data=df_results, palette='coolwarm')
plt.title("R² Score Comparison: Hybrid vs KNN")
plt.ylabel("R² Score")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()
plt.figure(figsize=(10, 5))
sns.barplot(x="Model", y="Accuracy", data=df_results, palette='magma')
plt.title("Accuracy Comparison: Hybrid vs KNN")
plt.ylabel("Accuracy")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()
